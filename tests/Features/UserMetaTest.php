<?php

namespace CityHunter\LaravelMetaData\Tests\Features;

use CityHunter\LaravelMetaData\Tests\Factories\UserFactory;
use CityHunter\LaravelMetaData\Tests\Factories\UserMetaFactory;
use CityHunter\LaravelMetaData\Tests\Models\User;
use CityHunter\LaravelMetaData\Tests\Models\UserMeta;
use CityHunter\LaravelMetaData\Tests\TestCase;

class UserMetaTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function testGetUserMetas()
    {
        $user = UserFactory::new()->create();
        UserMetaFactory::new()->set("user_id", $user->id)->create();
        $this->assertTrue(UserMeta::all()->count() === 1);

        $this->assertSame(1, count(\get_user_meta($user->id)));

        \add_user_meta($user->id, "test_key", "test_value");
        $this->assertSame(2, count(\get_user_meta($user->id)));

        $this->assertTrue(is_array(\get_user_meta($user->id, "test_key")));
        $this->assertTrue(is_string(\get_user_meta($user->id, "test_key", true)));
    }

    public function testGetMetaWithNotExistKey()
    {
        $user = UserFactory::new()->create();
        $this->assertSame(null, get_user_meta($user->id, "My_undefined_key", true));
        $this->assertEmpty(get_user_meta($user->id, "My_undefined_key_sr"));
        $this->assertEmpty(get_user_meta($user->id));
    }
}
